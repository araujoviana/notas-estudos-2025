<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Projeto E An√°lise De Algoritmos II on Anota√ß√µes de Estudos - 2025</title>
    <link>http://localhost:1313/categories/projeto-e-an%C3%A1lise-de-algoritmos-ii/</link>
    <description>Recent content in Projeto E An√°lise De Algoritmos II on Anota√ß√µes de Estudos - 2025</description>
    <generator>Hugo -- 0.126.2</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Mar 2025 16:00:03 -0300</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/projeto-e-an%C3%A1lise-de-algoritmos-ii/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>M√©todo Mestre e Decremento e Conquista</title>
      <link>http://localhost:1313/posts/aula-18/</link>
      <pubDate>Fri, 07 Mar 2025 16:00:03 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-18/</guid>
      <description>Essas anota√ß√µes foram convertidas das anota√ß√µes do caderno via OCR ent√£o talvez hajam alguns errinhos minimos, mas o que eu vi eu arrumei üòÆ‚Äçüí®
An√°lise de C√≥digo com √Årvores Todas as an√°lises aqui podem ser feitas usando √°rvores.
Fun√ß√£o F(int N) void F(int N) { if (N &amp;gt; 0) { printf(&amp;#34;%d &amp;#34;, N); F(N - 1); } } Recorr√™ncia $T(N)$ $$ T(N) = 1 \text{, se } N = 0 $$ $$ T(N) = 2T(N-1) + 1 \text{, se } N &amp;gt; 0 $$</description>
    </item>
    <item>
      <title>Resolu√ß√£o de Recorr√™ncias</title>
      <link>http://localhost:1313/posts/aula-16/</link>
      <pubDate>Fri, 28 Feb 2025 14:17:13 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-16/</guid>
      <description>M√©todos para Resolver Recorr√™ncias Substitui√ß√£o Iterativos √Årvore de Recurs√£o M√©todo Mestre 1. Substitui√ß√£o A ideia √© arriscar um palpite para a solu√ß√£o da recorr√™ncia
e, em seguida, usar indu√ß√£o matem√°tica para provar que o palpite est√° correto.
Exemplo 1 int f(int n) { if (n &amp;gt; 0) { printf(&amp;#34;%d&amp;#34;, n); f(n - 1); } return 0; } Recorr√™ncia:
$T(n) = 1$ se $n = 0$ $T(n) = T(n-1) + 1$ se $n &amp;gt; 0$ Palpite:</description>
    </item>
    <item>
      <title>An√°lise de Algoritmos Iterativos</title>
      <link>http://localhost:1313/posts/aula-10/</link>
      <pubDate>Fri, 21 Feb 2025 14:28:49 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-10/</guid>
      <description>Vale lembrar que $O$ √© diferente de $\theta$, ent√£o essa an√°lise assint√≥tica √© do caso m√©dio e n√£o do pior caso.
for (int i = 0; i &amp;lt; n; i++) { printf(&amp;#34;%d&amp;#34;, n); } O loop percorre por toda a estrutura n.
Tempo: $\theta(n)$ for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; n; j++) { printf(&amp;#34;%d&amp;#34;, n); } } O loop percorre por toda a estrutura n, n vezes.</description>
    </item>
    <item>
      <title>Provas de Complexidade - O(n), Œ©(n), Œ∏(n)</title>
      <link>http://localhost:1313/posts/aula-3/</link>
      <pubDate>Fri, 14 Feb 2025 15:18:20 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-3/</guid>
      <description>O(n) - Pior caso Defini√ß√£o $$O(g(n)) = \{ f(n): \exists \ c &amp;gt; 0, n_{0} \geq 0 \text{ tal que } f(n) \leq cg(n), \forall n \geq n_0 \}$$
Exemplo $$O(n^3) = \left\{ 3n^3, 5n^3, 10n^3, 50n^3, \dots \right\}$$ $$\left\{ 3n^2, 5n^2, \dots \right\}$$ $$\left\{ 3n, 5n, \dots \right\}$$ $$\left\{ 1, 5, 7, 9, \dots \right\}$$ $$\left\{ \frac{1}{n}, \frac{1}{n^2}, \frac{1}{n^3} \right\}$$
Nesse caso, $O(n^3) $ √© o limite superior.
Provas para O(n) $$n^2 + 3n = O(n^3)$$</description>
    </item>
    <item>
      <title>T√©cnicas de Projetos de Algoritmos</title>
      <link>http://localhost:1313/posts/aula-2/</link>
      <pubDate>Thu, 13 Feb 2025 13:26:05 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-2/</guid>
      <description>T√©cnicas gerais Backtracking Categoria de algor√≠tmos que consistem em enumerar todas as combina√ß√µes poss√≠veis (provavelmente em uma √°rvore) para uma solu√ß√£o e avaliar se satisfazem o problema. Costuma ser recursivo.
Seu m√©todo de funcionamento √© semelhante ao Depth First Search.
Um exemplo de uso √© o Problema das oito damas, onde oito damas devem ser posicionadas em um tabuleiro de modo que nenhuma delas estejam na mesma linha, coluna e diagonal.</description>
    </item>
  </channel>
</rss>
