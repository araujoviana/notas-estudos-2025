<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Anota√ß√µes de Estudos - 2025</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Anota√ß√µes de Estudos - 2025</description>
    <generator>Hugo -- 0.126.2</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Feb 2025 13:25:08 -0300</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>√Årvores</title>
      <link>http://localhost:1313/posts/aula-11/</link>
      <pubDate>Mon, 24 Feb 2025 13:25:08 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-11/</guid>
      <description>O que s√£o √°rvores para a computa√ß√£o? Estruturas que armazenam dados. Capacidade de armazenamento din√¢mica (ao contr√°rio de arrays que s√£o est√°ticos). Compostas por: N√≥s: onde os dados s√£o armazenados. Arestas: interligam os n√≥s. Possuem um √∫nico n√≥ raiz. Possuem uma ou mais folhas. Cada n√≥ possui zero ou mais filhos. N√≥s sem filhos s√£o chamados folhas. Alguns tipos de √°rvores? √Årvores Bin√°rias: Cada n√≥ possui 0, 1 ou 2 filhos.</description>
    </item>
    <item>
      <title>An√°lise de Algoritmos Iterativos</title>
      <link>http://localhost:1313/posts/aula-10/</link>
      <pubDate>Fri, 21 Feb 2025 14:28:49 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-10/</guid>
      <description>Vale lembrar que $O$ √© diferente de $\theta$, ent√£o essa an√°lise assint√≥tica √© do caso m√©dio e n√£o do pior caso.
for (int i = 0; i &amp;lt; n; i++) { printf(&amp;#34;%d&amp;#34;, n); } O loop percorre por toda a estrutura n.
Tempo: $\theta(n)$ for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; n; j++) { printf(&amp;#34;%d&amp;#34;, n); } } O loop percorre por toda a estrutura n, n vezes.</description>
    </item>
    <item>
      <title>N√∫meros de ponto flutuante</title>
      <link>http://localhost:1313/posts/aula-9/</link>
      <pubDate>Fri, 21 Feb 2025 13:47:00 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-9/</guid>
      <description>Origem da representa√ß√£o Em 1985, o IEEE publicou um relat√≥rio que especificava formatos para precis√£o simples, dupla e estendida, que ficou conhecido como IEEE 754, e √© seguido por desenvolvedores que manipulam ponto flutuante.
S√£o denominados:
Float - N√∫mero real de precis√£o de precis√£o simples (32 bits) Double - N√∫mero real de precis√£o dupla (64 bits) Recupera√ß√£o de doubles Para a recupera√ß√£o do tipo double, em particular, usamos a seguinte f√≥rmula:</description>
    </item>
    <item>
      <title>Introdu√ß√£o a Probabilidades</title>
      <link>http://localhost:1313/posts/aula-8/</link>
      <pubDate>Wed, 19 Feb 2025 16:41:58 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-8/</guid>
      <description>Conceitos B√°sicos Experimento aleat√≥rio Procedimento cujo resultado √© incerto
Exemplos:
Jogar uma moeda Sortear um n√∫mero inteiro de um a cem Lan√ßar um dado Espa√ßo amostral O conjunto de todos os resultados poss√≠veis de um experimento aleat√≥rio, representado por $\Omega$
Exemplos:
Jogar uma moeda $\Omega = $ {$\text{cara}, \text{coroa}$} Sortear um n√∫mero inteiro de um a cem $\Omega = $ {$1,2,\dots,99,100$} Lan√ßar um dado $\Omega = $ {$1,2,3,4,5,6$} Evento Qualquer subconjunto do espa√ßo amostral, ou seja,</description>
    </item>
    <item>
      <title>Defini√ß√£o de software</title>
      <link>http://localhost:1313/posts/aula-7/</link>
      <pubDate>Wed, 19 Feb 2025 14:53:31 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-7/</guid>
      <description> Essa p√°gina √© bem vaga mesmo ü§∑
Escopo do Software Abrange:
Programa Instru√ß√µes Dados pr√©-determin√≠sticos Hardware Ideia Solu√ß√£o de problemas Abstra√ß√£o Comuni√ß√£o Requisitos Passo a passo:
Coletar dados Planejar (diagramas) Entregar Engenheiro de Software Dev Arquiteto de Software (modelagem) Processos de Software Processo de neg√≥cio </description>
    </item>
    <item>
      <title>Evolu√ß√£o do Gerenciamento de Processos</title>
      <link>http://localhost:1313/posts/aula-6/</link>
      <pubDate>Tue, 18 Feb 2025 15:16:46 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-6/</guid>
      <description>Sistemas Tipos de tratamento de programas Sistemas monoprogramados - Carrega apenas um programa por vez. Sistemas multiprogramados - Carrega m√∫ltiplos programas na mem√≥ria. Problemas dos computadores (da √©poca) A CPU ficava ociosa quando precisava interagir com um dispositivo de E/S. Programadores precisavam levar em considera√ß√£o as particularidades de hardware de cada sistema para programar. Solu√ß√µes Problema 1 (CPU ociosa) Preemptividade: Sistema era capaz de pausar um processo que estivesse aguardando por uma opera√ß√£o de E/S, liberando a CPU (Troca de contexto).</description>
    </item>
    <item>
      <title>Vetores, Pilhas e Filas em Java</title>
      <link>http://localhost:1313/posts/aula-5/</link>
      <pubDate>Mon, 17 Feb 2025 19:28:32 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-5/</guid>
      <description>Vetores em Java Defini√ß√£o Usado pra armazenar m√∫ltiplos valores do mesmo tipo.
double [] notas; int[] notas = new int[1000]; Use double ao inv√©s de float em Java.
Costumam ser populadas com um loop for
import java.util.Random; public class Vetores { public static void main(String []args) { int []w = new Random(); // O(n) for(int i = 0; i &amp;lt; w.length; i++) { w[i] = r.nextInt(11); } // Agora a matriz est√° populada } } Nomenclatura A nomenclatura muda de acordo com a dimensionalidade do vetor:</description>
    </item>
    <item>
      <title>Provas de Complexidade - O(n), Œ©(n), Œ∏(n)</title>
      <link>http://localhost:1313/posts/aula-3/</link>
      <pubDate>Fri, 14 Feb 2025 15:18:20 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-3/</guid>
      <description>O(n) - Pior caso Defini√ß√£o $$O(g(n)) = \{ f(n): \exists \ c &amp;gt; 0, n_{0} \geq 0 \text{ tal que } f(n) \leq cg(n), \forall n \geq n_0 \}$$
Exemplo $$O(n^3) = \left\{ 3n^3, 5n^3, 10n^3, 50n^3, \dots \right\}$$ $$\left\{ 3n^2, 5n^2, \dots \right\}$$ $$\left\{ 3n, 5n, \dots \right\}$$ $$\left\{ 1, 5, 7, 9, \dots \right\}$$ $$\left\{ \frac{1}{n}, \frac{1}{n^2}, \frac{1}{n^3} \right\}$$
Nesse caso, $O(n^3) $ √© o limite superior.
Provas para O(n) $$n^2 + 3n = O(n^3)$$</description>
    </item>
    <item>
      <title>T√©cnicas de Projetos de Algoritmos</title>
      <link>http://localhost:1313/posts/aula-2/</link>
      <pubDate>Thu, 13 Feb 2025 13:26:05 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-2/</guid>
      <description>T√©cnicas gerais Backtracking Categoria de algor√≠tmos que consistem em enumerar todas as combina√ß√µes poss√≠veis (provavelmente em uma √°rvore) para uma solu√ß√£o e avaliar se satisfazem o problema. Costuma ser recursivo.
Seu m√©todo de funcionamento √© semelhante ao Depth First Search.
Um exemplo de uso √© o Problema das oito damas, onde oito damas devem ser posicionadas em um tabuleiro de modo que nenhuma delas estejam na mesma linha, coluna e diagonal.</description>
    </item>
    <item>
      <title>Classes em Java</title>
      <link>http://localhost:1313/posts/aula-1/</link>
      <pubDate>Thu, 13 Feb 2025 13:14:22 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-1/</guid>
      <description>Classes em Java Linguagens como Java, C# e C++ seguem o paradigma da Programa√ß√£o orientada a objeto, onde os componentes do programa s√£o designados por classes e objetos.
Cachorro Defini√ß√£o Exemplo de uma classe do tipo Cachorro em Java, contendo os componentes b√°sicos de uma classe.
// Classe public class Cachorro { // Atributos // Constantes private final int anoDeNascimento; private final String raca; private final String cor; // Vari√°veis mut√°veis private int energia; private boolean acordado; // M√©todos // Construtores public Cachorro() { anoDeNascimento = 2025; raca = &amp;#34;Vira lata&amp;#34;; cor = &amp;#34;Caramelo&amp;#34;; energia = 5; acordado = true; } public Cachorro(int anoDeNascimento, String raca, String cor) { this.</description>
    </item>
    <item>
      <title>Revis√£o de Estat√≠stica</title>
      <link>http://localhost:1313/posts/aula-0/</link>
      <pubDate>Tue, 11 Feb 2025 17:39:43 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-0/</guid>
      <description>‚ö†Ô∏è - As contas e l√≥gica precisam ser verificadas, dado que a revis√£o n√£o teve explica√ß√£o.
Enunciado Ao longo dessa explica√ß√£o ser√° usado o seguinte problema de exemplo:
Dados que o menor e o maior sal√°rio dos 60 funcion√°rios da Empresa X s√£o respectivamente 600,00 reais e 30000,00 reais e sabendo que os dados foram agrupados em 6 classes com amplitude de 5000,00 reais e as frequ√™ncias das classes s√£o respectivamente: 21, 16, 12, 7, 3, 1:</description>
    </item>
    <item>
      <title>ENIAC e Sistemas em Lote</title>
      <link>http://localhost:1313/posts/aula-4/</link>
      <pubDate>Tue, 11 Feb 2025 15:04:39 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-4/</guid>
      <description>Defini√ß√£o de computador Computador :: Entrada -&amp;gt; Saida Computador entrada = ... Todo computador deve ter entradas e sa√≠das.
ENIAC Usava v√°lvulas Operadores de Computador Sistema monoprogramado (1 programa por vez) Sistema em lote (BATCH) Sistema gerencia a fila Cada processo -&amp;gt; job Sem intera√ß√£o com o usu√°rio jobs independentes Dispositivos de E/S Programadores precisavam conhecer as particularidades do hardware de cada dispositivo </description>
    </item>
  </channel>
</rss>
