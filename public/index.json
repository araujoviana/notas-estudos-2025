[{"content":"O(n) - Pior caso Defini√ß√£o $$O(g(n)) = \\{ f(n): \\exists \\ c \u0026gt; 0, n_{0} \\geq 0 \\text{ tal que } f(n) \\leq cg(n), \\forall n \\geq n_0 \\}$$\nExemplo $$O(n^3) = \\left\\{ 3n^3, 5n^3, 10n^3, 50n^3, \\dots \\right\\}$$ $$\\left\\{ 3n^2, 5n^2, \\dots \\right\\}$$ $$\\left\\{ 3n, 5n, \\dots \\right\\}$$ $$\\left\\{ 1, 5, 7, 9, \\dots \\right\\}$$ $$\\left\\{ \\frac{1}{n}, \\frac{1}{n^2}, \\frac{1}{n^3} \\right\\}$$\nNesse caso, $O(n^3) $ √© o limite superior.\nNo caso, a linha vermelha corresponde ao $O(n^3)$\nProvas para O(n) $$n^2 + 3n = O(n^3)$$\nProva Pela defini√ß√£o da nota√ß√£o, $\\exists c, n_0 \u0026gt; 0$,\ntal que $$n^3+3n \\leq cn^3$$ temos $$n^2 + 3n \\leq n^3 + 3n^3 \\rightarrow 4n^3$$\nisto vale para $c=4$ e $n_0=0$, portanto\n$$n^2 + 3n = O(n^3)$$\n$\\blacksquare$\n$$n^2+3n=O(n)$$\nProva Por contradi√ß√£o suponha que $n^2+3n = O(n)$\nPela defini√ß√£o da nota√ß√£o, $\\exists c, n_0 \u0026gt; 0$,\ntal que\n$$\\frac{n^2+3n}{n} \\leq \\frac{c n}{n}$$\n(A opera√ß√£o de divis√£o aplicada preserva a desigualdade)\n$$n+3\\leq c$$\nIsso √© um absurdo, portanto $n^2+3n \\neq O(n)$\n$\\blacksquare$\n$$\\frac{1}{n^2} = O(n^3)$$\nProva Pela defini√ß√£o da nota√ß√£o, $\\exists c, n_0 \u0026gt; 0$, tal que\n$$\\frac{1}{n^2} \\leq cn^3$$\ntemos que\n$$\\frac{1}{n^2}=n^{-2} \\leq (1)n^3$$\nPara $c=1, n_0\\geq 1$ essa express√£o vale.\nPortanto $\\frac{1}{n^2} = O(n^3)$\n$\\blacksquare$\n$$\\sqrt{n} + 5 \\log_{\\frac{3}{2}}n \\leq cn^3$$\nPela defini√ß√£o da nota√ß√£o, $\\exists c, n_0 \u0026gt; 0$, tal que\n$$\\sqrt{n} + \\log_{\\frac{3}{2}}n \\leq cn^3$$\ntemos que\n$$ \\sqrt{n} + \\log_{\\frac{3}{2}}n = n^{\\frac{1}{2}} + 5 \\log_{\\frac{3}{2}}n \\leq n^3 + 5n^3 \\rightarrow 6n^3 $$\nPara $n_0 \\geq 1$ e $c = 6$, a express√£o vale. Logo $\\frac{1}{n^2} = O(n^3)$\n$\\blacksquare$\n$$5n^3 + 3n^2 - 25 = O(n^3)$$\nProva Pela defini√ß√£o da nota√ß√£o, $\\exists c, n_0 \u0026gt; 0$, tal que\n$$5n^3 + 3n^2 - 25 \\leq cn^3$$\ntemos\n$$5n^3 + 3n^2 - 25 \\leq 5n^3+3n^2 \\leq 5n^3 + 3n^3 = 8n^3$$\n(os expoentes s√£o diferentes)\nPara $n_0 \\leq 0$ e $c=8$, $5n^3 + 3n^2 - 25 = O(n^3)$\n$\\blacksquare$\nEsse aqui √© chato de escrever üôÉ\n$$\\log_{10} n + \\log_{\\frac{3}{2}}n + \\log_2 n = O(\\log_3 n)$$\nPela defini√ß√£o da nota√ß√£o, $\\exists c, n_0 \u0026gt; 0$, tal que\n$$\\frac{\\log_3 n}{\\log_{10} n} + \\frac{\\log_3 n}{\\log_{\\frac{3}{2}} n} + \\frac{\\log_3 n}{\\log_2 n} = \\boxed{\\frac{1}{\\log_{10} n} + \\frac{1}{\\log_{\\frac{3}{2}} n} + \\frac{1}{\\log_2 n}}\\log_3 n$$\nPara $n_0 \\geq 1$, a express√£o vale.\n$\\blacksquare$\nŒ©(n) - Melhor caso Defini√ß√£o $$\\Omega(g(n)) = \\{ f(n): \\exists \\ c \u0026gt; 0, n_{0} \\geq 0 \\text{ tal que } f(n) \\geq cg(n), \\forall n \\geq n_0 \\}$$\nExemplo $$\\Omega(n^3) = \\left\\{ 3n^3, 5n^3, 10n^3, 50n^3, \\dots \\right\\}$$ $$\\left\\{ 3n^4, 5n^4, \\dots \\right\\}$$ $$\\left\\{ 3n^5, 5n^5, \\dots \\right\\}$$ $$\\left\\{ n^n, 2^n, 3^n, \\dots \\right\\}$$ $$\\left\\{ n \\log n, n^2 \\log n, \\dots \\right\\}$$\nNesse caso, $\\Omega(n^3) $ √© o limite inferior.\nA linha vermelha corresponde ao $\\Omega(n^3)$ (ele eventualmente √© ultrapassado pelos outros).\nProfessor n√£o deu nenhuma prova para esse caso ü§∑, mas ele √© incluso nas provas para Œ∏(n)\nŒò(n) - Caso M√©dio Defini√ß√£o $$\\Theta(g(n)) = \\{ f(n): \\exists \\ c_1, c_2 \u0026gt; 0, n_{0} \\geq 0 \\text{ tal que } c_1 g(n) \\leq f(n) \\leq c_2 g(n), \\forall n \\geq n_0 \\}$$\nExemplos $$\\Theta(n^3) = \\left\\{ 3n^3, 5n^3, 10n^3, 50n^3, \\dots \\right\\}$$ $$\\Theta(n^4) = \\left\\{ 3n^4, 5n^4, \\dots \\right\\}$$ $$\\Theta(n^5) = \\left\\{ 3n^5, 5n^5, \\dots \\right\\}$$ $$\\Theta(n \\log n) = \\left\\{ 2n \\log n, 5n \\log n, \\dots \\right\\}$$\nNesse caso, $\\Theta(n^3)$ representa uma faixa de crescimento assint√≥tico em que a fun√ß√£o est√° limitada superior e inferiormente por m√∫ltiplos constantes de $n^3$.\nA linha vermelha corresponde ao $ \\theta (n^3)$.\nProvas para Œ∏(n) $$\\frac{1}{2}n^2-3n=\\theta(n^2)$$\nPela defini√ß√£o da nota√ß√£o Œ∏ (esse √© diferente dos outros), $\\exists c_1, c_2 \u0026gt; 0 \\text{ e } n_0 \\geq 0$\ntal que\n$$c_1n^2 \\leq \\frac{1}{2}n^2-3n \\leq c_2n^2$$\nParte 1 Provar que $\\frac{1}{2}n^2-3n \\leq c_2n^2$\ntemos que $\\frac{1}{2}n^2-3n \\leq \\frac{1}{2}n^2$\nisto vale $c_2 = \\frac{1}{2}$ e $n_0 \\geq 0$\nParte 2 $$c_1n^2\\leq\\frac{1}{2}n^2-3n$$ $$\\frac{1}{2}n^2 -3n \\geq c_1n^2$$\ntemos que\n$$\\frac{1}{2}n^2 -3n \\geq \\frac{1}{4}n^2 + \\boxed{\\frac{1}{4}n^2-3n} \\geq \\frac{1}{4}n^2$$\nA parte dentro do quadrado √© $\\geq 0$,\nQuando $\\frac{1}{4}n^2-3n \\geq 0$\ntemos $\\frac{1}{4}n^2 \\geq 3n $\n$$c_1 = \\frac{1}{4} \\text{ e } n_0 \\geq 12 $$\nPara $c_1=\\frac{1}{4}$, $c_2 = \\frac{1}{2}$ e $n_0 = max(0,12) = 12$\nA express√£o vale.\nLogo $\\frac{1}{2}n^2-3n=\\theta(n^2)$\n$\\blacksquare$\n","permalink":"http://localhost:1313/posts/aula-4/","summary":"O(n) - Pior caso Defini√ß√£o $$O(g(n)) = \\{ f(n): \\exists \\ c \u0026gt; 0, n_{0} \\geq 0 \\text{ tal que } f(n) \\leq cg(n), \\forall n \\geq n_0 \\}$$\nExemplo $$O(n^3) = \\left\\{ 3n^3, 5n^3, 10n^3, 50n^3, \\dots \\right\\}$$ $$\\left\\{ 3n^2, 5n^2, \\dots \\right\\}$$ $$\\left\\{ 3n, 5n, \\dots \\right\\}$$ $$\\left\\{ 1, 5, 7, 9, \\dots \\right\\}$$ $$\\left\\{ \\frac{1}{n}, \\frac{1}{n^2}, \\frac{1}{n^3} \\right\\}$$\nNesse caso, $O(n^3) $ √© o limite superior.\nNo caso, a linha vermelha corresponde ao $O(n^3)$","title":"Provas de Complexidade - O(n), Œ©(n), Œ∏(n)"},{"content":"T√©cnicas gerais Backtracking Categoria de algor√≠tmos que consistem em enumerar todas as combina√ß√µes poss√≠veis (provavelmente em uma √°rvore) para uma solu√ß√£o e avaliar se satisfazem o problema. Costuma ser recursivo.\nSeu m√©todo de funcionamento √© semelhante ao Depth First Search.\nUm exemplo de uso √© o Problema das oito damas, onde oito damas devem ser posicionadas em um tabuleiro de modo que nenhuma delas estejam na mesma linha, coluna e diagonal.\nAlgoritmos gulosos (Greedy) Abordagem em que algoritmos buscam resolver o problema escolhendo, em cada etapa, a melhor op√ß√£o dispon√≠vel no momento, ou a que n√£o infringe nenhuma restri√ß√£o, com o objetivo de (teoricamente) encontrar a melhor solu√ß√£o.\nPor√©m, algoritmos gulosos podem n√£o encontrar a solu√ß√£o √≥tima, pois tomam decis√µes locais sem considerar o impacto a longo prazo, o que pode levar a uma solu√ß√£o sub√≥tima.\nPrograma√ß√£o din√¢mica √â a t√©cnica que busca encontrar a solu√ß√£o de v√°rios subproblemas para ent√£o, encontrar a solu√ß√£o do problema geral. Ao contr√°rio do backtracking que busca todas as solu√ß√µes.\nMemoization (memoriza√ß√£o) √© uma das t√©cnicas usadas em programa√ß√£o din√¢mica, ela armazena os resultados de subproblemas para evitar recalcul√°-los, o que diminui a complexidade de um algoritmo de fibonacci recursivo de $O(n^2)$ para $O(n)$.\nRecurs√£o Fun√ß√£o ou procedimento que possui uma chamada para si mesmo.\nfatorial 0 = 1 -- Caso base fatorial n = n * fatorial (n-1) -- Caso recursivo O n√∫mero de chamadas recursivas (sem contar a primeira que √© feita antes da recurs√£o iniciar) de uma fun√ß√£o √© denominado profundidade de recurs√£o, N√ÉO confunda com a altura da √°rvore da recurs√£o.\nA profundidade da fun√ß√£o fatorial cresce linearmente:\nfatorial(4) -\u0026gt; 4 fatorial(10) -\u0026gt; 10 Ter uma profundidade de recurs√£o muito grande pode prejudicar a performance do programa, isso ocorre por conta do ac√∫mulo de dados na pilha de execu√ß√£o (stack), o que pode at√© causar um stack overflow (transbordamento da pilha).\nfib 0 = 0 fib 1 = 1 fib n = fib (n - 1) + fib (n - 2) Essa fun√ß√£o √© extremamente lenta, tendo complexidade quase exponencial, aculumando muitas chamadas recursivas.\nfib(4) -\u0026gt; 8 fib(10) -\u0026gt; 177 Toda fun√ß√£o recursiva pode ter uma vers√£o iterativa, mas nem sempre o contr√°rio √© poss√≠vel.\nAs fun√ß√µes recursivas costumam ser mais simples que as iterativas, mas as iterativas costumam ser mais r√°pidas que as recursivas.\nC√≥digos Abaixo temos um contador de chamadas recursivas da fun√ß√£o de Fibonacci, escrita em Rust:\nuse std::io; fn fib(n: i32, p: \u0026amp;mut i32) -\u0026gt; i32 { *p += 1; match n { 0 =\u0026gt; 0, 1 =\u0026gt; 1, _ =\u0026gt; fib(n - 1, p) + fib(n - 2, p), } } fn main() { // Escreva a sua solu√ß√£o aqui // Code your solution here // Escriba su soluci√≥n aqu√≠ let mut entrada = String::with_capacity(3); io::stdin() .read_line(\u0026amp;mut entrada) .expect(\u0026#34;Erro de entrada\u0026#34;); let repeticoes: i32 = entrada.trim().parse().expect(\u0026#34;Erro de convers√£o\u0026#34;); let mut numeros: Vec\u0026lt;i32\u0026gt; = vec![]; for _ in 0..repeticoes { entrada.clear(); io::stdin() .read_line(\u0026amp;mut entrada) .expect(\u0026#34;Erro de entrada\u0026#34;); numeros.push(entrada.trim().parse().expect(\u0026#34;Erro de convers√£o\u0026#34;)); } for numero in numeros { let mut passos: i32 = -1; let resultado = fib(numero, \u0026amp;mut passos); println!(\u0026#34;fib({}) = {} calls = {}\u0026#34;, numero, passos, resultado); } } E outro igual, mas em C:\n#include \u0026lt;stdio.h\u0026gt; int fib(int n, int *p) { (*p)++; if (n == 0) return 0; if (n == 1) return 1; return fib(n - 1, p) + fib(n - 2, p); } int main() { int repeticoes; scanf(\u0026#34;%d\u0026#34;, \u0026amp;repeticoes); int numeros[repeticoes]; for (int i = 0; i \u0026lt; repeticoes; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;numeros[i]); } for (int i = 0; i \u0026lt; repeticoes; i++) { int passos = -1; int resultado = fib(numeros[i], \u0026amp;passos); printf(\u0026#34;fib(%d) = %d calls = %d\\n\u0026#34;, numeros[i], passos, resultado); return 0; } Refer√™ncias relevantes http://www.ime.usp.br/~pf/analise_de_algoritmos/ https://www.ime.usp.br/~pf/algoritmos/ http://wiki.inf.ufpr.br/maziero/doku.php?id=prog2:start ","permalink":"http://localhost:1313/posts/aula-3/","summary":"T√©cnicas gerais Backtracking Categoria de algor√≠tmos que consistem em enumerar todas as combina√ß√µes poss√≠veis (provavelmente em uma √°rvore) para uma solu√ß√£o e avaliar se satisfazem o problema. Costuma ser recursivo.\nSeu m√©todo de funcionamento √© semelhante ao Depth First Search.\nUm exemplo de uso √© o Problema das oito damas, onde oito damas devem ser posicionadas em um tabuleiro de modo que nenhuma delas estejam na mesma linha, coluna e diagonal.","title":"T√©cnicas de Projetos de Algoritmos"},{"content":"Classes em Java Linguagens como Java, C# e C++ seguem o paradigma da Programa√ß√£o orientada a objeto, onde os componentes do programa s√£o designados por classes e objetos.\nCachorro Defini√ß√£o Exemplo de uma classe do tipo Cachorro em Java, contendo os componentes b√°sicos de uma classe.\n// Classe public class Cachorro { // Atributos // Constantes private final int anoDeNascimento; private final String raca; private final String cor; // Vari√°veis mut√°veis private int energia; private boolean acordado; // M√©todos // Construtores public Cachorro() { anoDeNascimento = 2025; raca = \u0026#34;Vira lata\u0026#34;; cor = \u0026#34;Caramelo\u0026#34;; energia = 5; acordado = true; } public Cachorro(int anoDeNascimento, String raca, String cor) { this.anoDeNascimento = anoDeNascimento; this.raca = raca; this.cor = cor; this.energia = 5; this.acordado = true; } // Outros m√©todos public void latir() { System.out.println(\u0026#34;Au\u0026#34;); } public void comer(int quantidade) { energia += quantidade; } public void dormir() { acordado = false; } public void acordar() { acordado = false; } public void andar() { energia -= 1; } // Setters public void setEnergia(int energia) { if (energia \u0026gt;= 0) { this.energia = energia; } } // Getters public int getAnoDeNascimento() { return this.anoDeNascimento; } public String getRaca(){ return this.raca; } public String getCor(){ return this.cor; } public int getEnergia(){ return this.energia; } public boolean getAcordado(){ return this.acordado; } } Uso Para usarmos uma classe como Cachorro precisamos instanciar ela em outro local, como na pr√≥pria Main:\npublic class Main { public static void main(String[] args) { // Criando um cachorro usando o construtor padr√£o Cachorro cachorro1 = new Cachorro(); // Criando um cachorro com valores personalizados Cachorro cachorro2 = new Cachorro(2020, \u0026#34;Labrador\u0026#34;, \u0026#34;Preto\u0026#34;); // Exibindo informa√ß√µes iniciais System.out.println(\u0026#34;Cachorro 1: \u0026#34; + cachorro1.getRaca() + \u0026#34;, \u0026#34; + cachorro1.getCor() + \u0026#34;, Ano: \u0026#34; + cachorro1.getAnoDeNascimento()); System.out.println(\u0026#34;Cachorro 2: \u0026#34; + cachorro2.getRaca() + \u0026#34;, \u0026#34; + cachorro2.getCor() + \u0026#34;, Ano: \u0026#34; + cachorro2.getAnoDeNascimento()); // Testando os m√©todos cachorro1.latir(); System.out.println(\u0026#34;Energia do cachorro 1 antes de andar: \u0026#34; + cachorro1.getEnergia()); cachorro1.andar(); System.out.println(\u0026#34;Energia do cachorro 1 depois de andar: \u0026#34; + cachorro1.getEnergia()); // Alimentando o cachorro cachorro2.comer(3); System.out.println(\u0026#34;Energia do cachorro 2 depois de comer: \u0026#34; + cachorro2.getEnergia()); // Fazendo o cachorro dormir e verificar estado cachorro1.dormir(); System.out.println(\u0026#34;Cachorro 1 est√° acordado? \u0026#34; + cachorro1.getAcordado()); // Acordando o cachorro e verificando cachorro1.acordar(); System.out.println(\u0026#34;Cachorro 1 est√° acordado? \u0026#34; + cachorro1.getAcordado()); } } ","permalink":"http://localhost:1313/posts/aula-2/","summary":"Classes em Java Linguagens como Java, C# e C++ seguem o paradigma da Programa√ß√£o orientada a objeto, onde os componentes do programa s√£o designados por classes e objetos.\nCachorro Defini√ß√£o Exemplo de uma classe do tipo Cachorro em Java, contendo os componentes b√°sicos de uma classe.\n// Classe public class Cachorro { // Atributos // Constantes private final int anoDeNascimento; private final String raca; private final String cor; // Vari√°veis mut√°veis private int energia; private boolean acordado; // M√©todos // Construtores public Cachorro() { anoDeNascimento = 2025; raca = \u0026#34;Vira lata\u0026#34;; cor = \u0026#34;Caramelo\u0026#34;; energia = 5; acordado = true; } public Cachorro(int anoDeNascimento, String raca, String cor) { this.","title":"Classes em Java"},{"content":" ‚ö†Ô∏è - As contas e l√≥gica precisam ser verificadas, dado que a revis√£o n√£o teve explica√ß√£o.\nEnunciado Ao longo dessa explica√ß√£o ser√° usado o seguinte problema de exemplo:\nDados que o menor e o maior sal√°rio dos 60 funcion√°rios da Empresa X s√£o respectivamente 600,00 reais e 30000,00 reais e sabendo que os dados foram agrupados em 6 classes com amplitude de 5000,00 reais e as frequ√™ncias das classes s√£o respectivamente: 21, 16, 12, 7, 3, 1:\nRevis√£o de conceitos Distribui√ß√£o de frequ√™ncia Agrupa valores quantitativos em intervalos chamados de classes.\nClasse Intervalo de Sal√°rio Frequ√™ncia Classe 1 [ 600,00, 5600,00) 21 Classe 2 [ 5600,00, 10600,00) 16 Classe 3 [ 10600,00, 15600,00) 12 Classe 4 [ 15600,00, 20600,00) 7 Classe 5 [ 20600,00, 25600,00) 3 Classe 6 [ 25600,00, 30000,00] 1 Total 60 \u0026lsquo;[\u0026rsquo; representa inclus√£o e \u0026lsquo;(\u0026rsquo; representa exclus√£o.\nPercentuais Se precisarmos encontrar o percentual de funcion√°rios com sal√°rios maiores ou menores que $x$ precisamos fazer:\nExtra√≠mos as classes inclusas no intervalo. Nesse exemplo vamos usar as classes que possuem sal√°rios maiores ou iguais a R$15000,00\nExtrair a frequ√™ncia total para cada classe inclusa, definida como:\n$$F_\\text{Total} = \\sum{\\text{Frequ√™ncias}}$$\nNo caso do exemplo, temos:\n$$F_\\text{Total} = 7 + 3 + 1 = 11$$\nCalcular a porcentagem $$\\text{Percentual} = \\frac{11}{60} \\cdot 100 \\approx 18,333% $$\nEncontrar classes atrav√©s de um atributo Usa-se a distribui√ß√£o da frequ√™ncia acumulada para encontrar:\nClasse Intervalo de Sal√°rio Frequ√™ncia Frequ√™ncia Acumulada Classe 1 [ 0,00, 5000,00) 21 21 Classe 2 [ 5000,00, 10000,00) 16 21 + 16 = 37 Classe 3 [ 10000,00, 15000,00) 12 37 + 12 = 49 Classe 4 [ 15000,00, 20000,00) 7 49 + 7 = 56 Classe 5 [ 20000,00, 25000,00) 3 56 + 3 = 59 Classe 6 [ 25000,00, 30000,00] 1 59 + 1 = 60 Total 60 Por exemplo, podemos inferir que:\nO 18¬∫ funcion√°rio percente √† classe 1, com o intervalo de sal√°rio de [0,00, 5000,00). O 50¬∫ funcion√°rio percente √† classe 4, com o intervalo de sal√°rio de [15000,00, 20000,00). Separatrizes As separatrizes dividem os dados em partes iguais, elas s√£o compostas por:\nDecis (D): Dividem os dados em 10 partes iguais. Quartis (Q): Dividem os dados em 4 partes iguais. Centis (C ou P - Percentis): Dividem os dados em 100 partes iguais. A separatriz pode ser calculada atrav√©s da seguinte f√≥rmula:\n$$\\text{Separatriz} = \\ell_{i} + \\left( \\frac{P-FA_{ant}}{f_{separatriz}} \\right)a_c$$\nDado que:\n$\\ell_{i}$: Limite inferior da classe que cont√©m a separatriz $P$: Posi√ß√£o da separatriz na distribui√ß√£o ordenada dos dados (8 para D8, 1 para Q1, etc). $FA_{ant}$: Frequ√™ncia acumulada da classe anterior √† classe que cont√©m a separatriz, se ela estiver na primeira classe ent√£o ser√° 0. $f_{separatriz}$: Frequ√™ncia absoluta da classe que cont√©m a separatriz. $a_c$: Amplitude da classe. Exemplo Vamos encontrar o D8: Dados respectivos aos mencionados anteriormente:\nPosi√ß√£o (P) de D8: $$ P = \\left(\\frac{8}{10}\\right) \\times N_{total} $$ $$ P = \\left(\\frac{8}{10}\\right) \\times 60 $$ $$ P = 48 $$\nClasse que cont√©m D8:\nConsultando a tabela de frequ√™ncias acumuladas: Classe 1: FA = 21 (Menor que 48) Classe 2: FA = 37 (Menor que 48) Classe 3: FA = 49 (Maior ou igual a 48) Portanto, D8 est√° na Classe 3. Intervalo da Classe 3: [R$ 10000,00, R$ 15000,00) Valores para a f√≥rmula:\n$\\ell_{i}$ = R$ 10000,00 (Limite inferior da Classe 3) $P$ = 48 (Posi√ß√£o calculada) $FA_{ant}$ = 37 (Frequ√™ncia acumulada da classe anterior, Classe 2) $f_{separatriz}$ = 12 (Frequ√™ncia da Classe 3) $a_c$ = R$ 5000,00 (Amplitude da classe) C√°lculo de D8: $$ D8 = 10000 + \\left( \\frac{48 - 37}{12} \\right) \\times 5000 $$ $$ D8 = 10000 + \\left( \\frac{11}{12} \\right) \\times 5000 $$ $$ D8 = 10000 + (0.91666\\ldots) \\times 5000 $$ $$ D8 = 10000 + 4583.33\\ldots $$ $$ D8 \\approx 14583,33 \\text{ reais} $$\nInterpreta√ß√£o de D8:\nAproximadamente 80% dos funcion√°rios da Empresa X ganham sal√°rios iguais ou inferiores a R$ 14583,33. E 20% ganham sal√°rios superiores a este valor. Mediana Ela √© respons√°vel por dividir a distribui√ß√£o em duas partes iguais, definida como:\n$$\\text{mediana} = \\ell_i + \\left( \\frac{\\frac{n}{2}-F_{ant}}{f_{mediana}} \\right)a_c$$\nAs vari√°veis s√£o as mesmas das da separatriz. (üò¥)\nExemplo Vamos encontrar a mediana do nosso exemplo:\n$$n = \\frac{60}{2} = 30$$\nA posi√ß√£o 30 est√° na classe 2, vamos calcular o resto:\n$$ \\text{Mediana} = 5000 + \\left( \\frac{30 - 21}{16} \\right) \\times 5000 $$ $$ \\text{Mediana} = 5000 + \\left( \\frac{9}{16} \\right) \\times 5000 $$ $$ \\text{Mediana} = 5000 + (0.5625) \\times 5000 $$ $$ \\text{Mediana} = 5000 + 2812,5 $$ $$ \\text{Mediana} = 7812,50 $$\nOutros c√°lculos Por falta de tempo, os outros exerc√≠cios do enunciado que ainda precisam ser elaborados:\nQuais os sal√°rios que limitam os 50% centrais? Qual √© o sal√°rio que separa os ¬æ dos funcion√°rios que t√™m maior sal√°rio? Qual √© o sal√°rio que separa os 40% que tem menor sal√°rio? Todas podem ser resolvidas com as f√≥rmulas da pr√≥xima se√ß√£o.\nOutras f√≥rmulas Outras f√≥rmulas que acabei n√£o usando mas provavelmente deveria ter usado porqu√™ estavam no enunciado original:\nModa $$\\text{moda}=\\ell_i + \\left( \\frac{\\Delta_1}{\\Delta_1 + \\Delta_2} \\right) a_c$$\nVari√¢ncia $$s^{2} = \\sum^n_{i=1}\\frac{(x_i-\\bar{x})^2\\cdot F}{n}$$\nDesvio padr√£o $$S = \\sqrt{S(x)^2}$$\nCoeficiente de varia√ß√£o $$C.V = \\frac{S}{\\bar{x}}\\cdot 100$$\nDistribui√ß√£o de frequ√™ncia discreta $$\\bar{x} = \\frac{\\sum^n_{i=1}f_{i}x_{i}}{n}$$\nDistribui√ß√£o de frequ√™ncia continua $$\\bar{x} = \\frac{\\sum^n_{i=1}f_{i}m_{i}}{n}$$\nFaltou a f√≥rmula da m√©dia, mas tudo que estava no documento original est√° presente aqui.\n","permalink":"http://localhost:1313/posts/aula-0/","summary":"‚ö†Ô∏è - As contas e l√≥gica precisam ser verificadas, dado que a revis√£o n√£o teve explica√ß√£o.\nEnunciado Ao longo dessa explica√ß√£o ser√° usado o seguinte problema de exemplo:\nDados que o menor e o maior sal√°rio dos 60 funcion√°rios da Empresa X s√£o respectivamente 600,00 reais e 30000,00 reais e sabendo que os dados foram agrupados em 6 classes com amplitude de 5000,00 reais e as frequ√™ncias das classes s√£o respectivamente: 21, 16, 12, 7, 3, 1:","title":"Revis√£o de Estat√≠stica"},{"content":"Defini√ß√£o de computador Computador :: Entrada -\u0026gt; Saida Computador entrada = ... Todo computador deve ter entradas e sa√≠das.\nENIAC Usava v√°lvulas Operadores de Computador Sistema monoprogramado (1 programa por vez) Sistema em lote (BATCH) Sistema gerencia a fila Cada processo -\u0026gt; job Sem intera√ß√£o com o usu√°rio jobs independentes Dispositivos de E/S Programadores precisavam conhecer as particularidades do hardware de cada dispositivo ","permalink":"http://localhost:1313/posts/aula-1/","summary":"Defini√ß√£o de computador Computador :: Entrada -\u0026gt; Saida Computador entrada = ... Todo computador deve ter entradas e sa√≠das.\nENIAC Usava v√°lvulas Operadores de Computador Sistema monoprogramado (1 programa por vez) Sistema em lote (BATCH) Sistema gerencia a fila Cada processo -\u0026gt; job Sem intera√ß√£o com o usu√°rio jobs independentes Dispositivos de E/S Programadores precisavam conhecer as particularidades do hardware de cada dispositivo ","title":"ENIAC e Sistemas em Lote"}]