<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software on Anota√ß√µes de Estudos - 2025</title>
    <link>http://localhost:1313/tags/software/</link>
    <description>Recent content in Software on Anota√ß√µes de Estudos - 2025</description>
    <generator>Hugo -- 0.126.2</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Mar 2025 12:06:13 -0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/software/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Processos</title>
      <link>http://localhost:1313/posts/aula-20/</link>
      <pubDate>Tue, 11 Mar 2025 12:06:13 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-20/</guid>
      <description>Consulte o slide original para as ilustra√ß√µes que s√£o bem √∫teis
Programas Vs. Processos Programas Conjunto de instru√ß√µes armazenados na mem√≥ria secund√°ria Passivo, n√£o consome recursos al√©m do armazenamento Processos Execu√ß√£o ativa de um programa pelo sistema operacional Ativo, utiliza recursos do sistema como mem√≥ria RAM, CPU e I/O Quando um programa √© executado, um processo √© criado no SO
Estados dos processos Novo Pronto (admitido na fila de prontos) Executando (ele foi escalonado, pode voltar pra fila de prontos) Terminado (concluiu todas as instru√ß√µes ou sofreu um erro fatal) Esperando (quando solicita uma instru√ß√£o de I/O, depois volta pra fila de prontos) Onde o processo existe Um processo existe na mem√≥ria principal enquanto est√° sendo executado.</description>
    </item>
    <item>
      <title>Kernel</title>
      <link>http://localhost:1313/posts/aula-12/</link>
      <pubDate>Tue, 25 Feb 2025 13:04:32 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-12/</guid>
      <description>Defini√ß√£o de Kernel Serve como uma ponte entre o hardware e o software, al√©m de gerenciar os recursos da m√°quina para que os programas usem os componentes da maneira correta.
N√≠vel de Privil√©gio Mecanismo que determina quais instru√ß√µes um programa pode exectuar e quais recursos pode acessar.
Exemplos principais (existem mais):
Modo Kernel (privilegiado): Permite acesso completo ao hardware e execu√ß√£o de instru√ß√µes privilegiadas. Modo usu√°rio (n√£o privilegiado): Restringe acesso direto ao hardware e pro√≠be instru√ß√µes privilegiadas, sendo necess√°rias o uso de chamadas do sistema (syscalls).</description>
    </item>
    <item>
      <title>Defini√ß√£o de software</title>
      <link>http://localhost:1313/posts/aula-7/</link>
      <pubDate>Wed, 19 Feb 2025 14:53:31 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-7/</guid>
      <description> Essa p√°gina √© bem vaga mesmo ü§∑
Escopo do Software Abrange:
Programa Instru√ß√µes Dados pr√©-determin√≠sticos Hardware Ideia Solu√ß√£o de problemas Abstra√ß√£o Comuni√ß√£o Requisitos Passo a passo:
Coletar dados Planejar (diagramas) Entregar Engenheiro de Software Dev Arquiteto de Software (modelagem) Processos de Software Processo de neg√≥cio </description>
    </item>
  </channel>
</rss>
