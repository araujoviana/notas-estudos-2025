<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Recursão on Anotações de Estudos - 2025</title>
    <link>http://localhost:1313/tags/recurs%C3%A3o/</link>
    <description>Recent content in Recursão on Anotações de Estudos - 2025</description>
    <generator>Hugo -- 0.126.2</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Mar 2025 15:30:03 -0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/recurs%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resolução de Sistemas Lineares I</title>
      <link>http://localhost:1313/posts/aula-17/</link>
      <pubDate>Fri, 07 Mar 2025 15:30:03 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-17/</guid>
      <description>Método de Gauss para Resolução de Sistemas Lineares O método de Gauss é um algoritmo para resolver sistemas de equações lineares, transformando o sistema original em um sistema triangular superior equivalente.
Eliminação Gaussiana com Substituição Inversa Algoritmo Entrada (INPUT): Número de incógnitas e equações ($n$), e a matriz aumentada $A = [a_{ij}]$, onde $1 \leq i \leq n$ e $1 \leq j \leq n+1$.
Saída (OUTPUT): Solução $x_1, x_2, &amp;hellip;, x_n$, ou uma mensagem indicando que não existe solução única.</description>
    </item>
    <item>
      <title>Resolução de Recorrências</title>
      <link>http://localhost:1313/posts/aula-16/</link>
      <pubDate>Fri, 28 Feb 2025 14:17:13 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-16/</guid>
      <description>Métodos para Resolver Recorrências Substituição Iterativos Árvore de Recursão Método Mestre 1. Substituição A ideia é arriscar um palpite para a solução da recorrência
e, em seguida, usar indução matemática para provar que o palpite está correto.
Exemplo 1 int f(int n) { if (n &amp;gt; 0) { printf(&amp;#34;%d&amp;#34;, n); f(n - 1); } return 0; } Recorrência:
$T(n) = 1$ se $n = 0$ $T(n) = T(n-1) + 1$ se $n &amp;gt; 0$ Palpite:</description>
    </item>
    <item>
      <title>Técnicas de Projetos de Algoritmos</title>
      <link>http://localhost:1313/posts/aula-2/</link>
      <pubDate>Thu, 13 Feb 2025 13:26:05 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-2/</guid>
      <description>Técnicas gerais Backtracking Categoria de algorítmos que consistem em enumerar todas as combinações possíveis (provavelmente em uma árvore) para uma solução e avaliar se satisfazem o problema. Costuma ser recursivo.
Seu método de funcionamento é semelhante ao Depth First Search.
Um exemplo de uso é o Problema das oito damas, onde oito damas devem ser posicionadas em um tabuleiro de modo que nenhuma delas estejam na mesma linha, coluna e diagonal.</description>
    </item>
  </channel>
</rss>
