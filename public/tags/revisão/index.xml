<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Revis√£o on Anota√ß√µes de Estudos - 2025</title>
    <link>http://localhost:1313/tags/revis%C3%A3o/</link>
    <description>Recent content in Revis√£o on Anota√ß√µes de Estudos - 2025</description>
    <generator>Hugo -- 0.126.2</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Mar 2025 16:00:03 -0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/revis%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>M√©todo Mestre e Decremento e Conquista</title>
      <link>http://localhost:1313/posts/aula-18/</link>
      <pubDate>Fri, 07 Mar 2025 16:00:03 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-18/</guid>
      <description>Essas anota√ß√µes foram convertidas das anota√ß√µes do caderno via OCR ent√£o talvez hajam alguns errinhos minimos, mas o que eu vi eu arrumei üòÆ‚Äçüí®
An√°lise de C√≥digo com √Årvores Todas as an√°lises aqui podem ser feitas usando √°rvores.
Fun√ß√£o F(int N) void F(int N) { if (N &amp;gt; 0) { printf(&amp;#34;%d &amp;#34;, N); F(N - 1); } } Recorr√™ncia $T(N)$ $$ T(N) = 1 \text{, se } N = 0 $$ $$ T(N) = 2T(N-1) + 1 \text{, se } N &amp;gt; 0 $$</description>
    </item>
    <item>
      <title>An√°lise de Algoritmos Iterativos</title>
      <link>http://localhost:1313/posts/aula-10/</link>
      <pubDate>Fri, 21 Feb 2025 14:28:49 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-10/</guid>
      <description>Vale lembrar que $O$ √© diferente de $\theta$, ent√£o essa an√°lise assint√≥tica √© do caso m√©dio e n√£o do pior caso.
for (int i = 0; i &amp;lt; n; i++) { printf(&amp;#34;%d&amp;#34;, n); } O loop percorre por toda a estrutura n.
Tempo: $\theta(n)$ for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; n; j++) { printf(&amp;#34;%d&amp;#34;, n); } } O loop percorre por toda a estrutura n, n vezes.</description>
    </item>
    <item>
      <title>Vetores, Pilhas e Filas em Java</title>
      <link>http://localhost:1313/posts/aula-5/</link>
      <pubDate>Mon, 17 Feb 2025 19:28:32 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-5/</guid>
      <description>Vetores em Java Defini√ß√£o Usado pra armazenar m√∫ltiplos valores do mesmo tipo.
double [] notas; int[] notas = new int[1000]; Use double ao inv√©s de float em Java.
Costumam ser populadas com um loop for
import java.util.Random; public class Vetores { public static void main(String []args) { int []w = new Random(); // O(n) for(int i = 0; i &amp;lt; w.length; i++) { w[i] = r.nextInt(11); } // Agora a matriz est√° populada } } Nomenclatura A nomenclatura muda de acordo com a dimensionalidade do vetor:</description>
    </item>
    <item>
      <title>Provas de Complexidade - O(n), Œ©(n), Œ∏(n)</title>
      <link>http://localhost:1313/posts/aula-3/</link>
      <pubDate>Fri, 14 Feb 2025 15:18:20 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-3/</guid>
      <description>O(n) - Pior caso Defini√ß√£o $$O(g(n)) = \{ f(n): \exists \ c &amp;gt; 0, n_{0} \geq 0 \text{ tal que } f(n) \leq cg(n), \forall n \geq n_0 \}$$
Exemplo $$O(n^3) = \left\{ 3n^3, 5n^3, 10n^3, 50n^3, \dots \right\}$$ $$\left\{ 3n^2, 5n^2, \dots \right\}$$ $$\left\{ 3n, 5n, \dots \right\}$$ $$\left\{ 1, 5, 7, 9, \dots \right\}$$ $$\left\{ \frac{1}{n}, \frac{1}{n^2}, \frac{1}{n^3} \right\}$$
Nesse caso, $O(n^3) $ √© o limite superior.
Provas para O(n) $$n^2 + 3n = O(n^3)$$</description>
    </item>
    <item>
      <title>Classes em Java</title>
      <link>http://localhost:1313/posts/aula-1/</link>
      <pubDate>Thu, 13 Feb 2025 13:14:22 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-1/</guid>
      <description>Classes em Java Linguagens como Java, C# e C++ seguem o paradigma da Programa√ß√£o orientada a objeto, onde os componentes do programa s√£o designados por classes e objetos.
Cachorro Defini√ß√£o Exemplo de uma classe do tipo Cachorro em Java, contendo os componentes b√°sicos de uma classe.
// Classe public class Cachorro { // Atributos // Constantes private final int anoDeNascimento; private final String raca; private final String cor; // Vari√°veis mut√°veis private int energia; private boolean acordado; // M√©todos // Construtores public Cachorro() { anoDeNascimento = 2025; raca = &amp;#34;Vira lata&amp;#34;; cor = &amp;#34;Caramelo&amp;#34;; energia = 5; acordado = true; } public Cachorro(int anoDeNascimento, String raca, String cor) { this.</description>
    </item>
    <item>
      <title>Revis√£o de Estat√≠stica</title>
      <link>http://localhost:1313/posts/aula-0/</link>
      <pubDate>Tue, 11 Feb 2025 17:39:43 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-0/</guid>
      <description>‚ö†Ô∏è - As contas e l√≥gica precisam ser verificadas, dado que a revis√£o n√£o teve explica√ß√£o.
Enunciado Ao longo dessa explica√ß√£o ser√° usado o seguinte problema de exemplo:
Dados que o menor e o maior sal√°rio dos 60 funcion√°rios da Empresa X s√£o respectivamente 600,00 reais e 30000,00 reais e sabendo que os dados foram agrupados em 6 classes com amplitude de 5000,00 reais e as frequ√™ncias das classes s√£o respectivamente: 21, 16, 12, 7, 3, 1:</description>
    </item>
  </channel>
</rss>
