<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Big O on Anotações de Estudos - 2025</title>
    <link>http://localhost:1313/tags/big-o/</link>
    <description>Recent content in Big O on Anotações de Estudos - 2025</description>
    <generator>Hugo -- 0.126.2</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 14:17:13 -0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/big-o/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resolução de Recorrências</title>
      <link>http://localhost:1313/posts/aula-16/</link>
      <pubDate>Fri, 28 Feb 2025 14:17:13 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-16/</guid>
      <description>Métodos para Resolver Recorrências Substituição Iterativos Árvore de Recursão Método Mestre 1. Substituição A ideia é arriscar um palpite para a solução da recorrência
e, em seguida, usar indução matemática para provar que o palpite está correto.
Exemplo 1 int f(int n) { if (n &amp;gt; 0) { printf(&amp;#34;%d&amp;#34;, n); f(n - 1); } return 0; } Recorrência:
$T(n) = 1$ se $n = 0$ $T(n) = T(n-1) + 1$ se $n &amp;gt; 0$ Palpite:</description>
    </item>
    <item>
      <title>Análise Númerica</title>
      <link>http://localhost:1313/posts/aula-15/</link>
      <pubDate>Fri, 28 Feb 2025 13:51:39 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-15/</guid>
      <description>Definição Algoritmos numéricos são métodos que buscam soluções numéricas para problemas, podendo ser exatas ou aproximadas. Eles são essenciais para resolver equações complexas, integrais e derivadas.
Complexidade de algoritmos A complexidade indica o desempenho de um algoritmo à medida que o tamanho da entrada cresce. Utiliza-se a notação assintótica:
Cota superior (Big-O): Limite máximo de crescimento. $$ f(n) = O(g(n)) $$
Cota inferior (Omega): Limite mínimo de crescimento. $$ f(n) = \Omega(g(n)) $$</description>
    </item>
    <item>
      <title>Análise de Algoritmos Iterativos</title>
      <link>http://localhost:1313/posts/aula-10/</link>
      <pubDate>Fri, 21 Feb 2025 14:28:49 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-10/</guid>
      <description>Vale lembrar que $O$ é diferente de $\theta$, então essa análise assintótica é do caso médio e não do pior caso.
for (int i = 0; i &amp;lt; n; i++) { printf(&amp;#34;%d&amp;#34;, n); } O loop percorre por toda a estrutura n.
Tempo: $\theta(n)$ for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; n; j++) { printf(&amp;#34;%d&amp;#34;, n); } } O loop percorre por toda a estrutura n, n vezes.</description>
    </item>
    <item>
      <title>Provas de Complexidade - O(n), Ω(n), θ(n)</title>
      <link>http://localhost:1313/posts/aula-3/</link>
      <pubDate>Fri, 14 Feb 2025 15:18:20 -0300</pubDate>
      <guid>http://localhost:1313/posts/aula-3/</guid>
      <description>O(n) - Pior caso Definição $$O(g(n)) = \{ f(n): \exists \ c &amp;gt; 0, n_{0} \geq 0 \text{ tal que } f(n) \leq cg(n), \forall n \geq n_0 \}$$
Exemplo $$O(n^3) = \left\{ 3n^3, 5n^3, 10n^3, 50n^3, \dots \right\}$$ $$\left\{ 3n^2, 5n^2, \dots \right\}$$ $$\left\{ 3n, 5n, \dots \right\}$$ $$\left\{ 1, 5, 7, 9, \dots \right\}$$ $$\left\{ \frac{1}{n}, \frac{1}{n^2}, \frac{1}{n^3} \right\}$$
Nesse caso, $O(n^3) $ é o limite superior.
Provas para O(n) $$n^2 + 3n = O(n^3)$$</description>
    </item>
  </channel>
</rss>
